:tocdepth: 3

.. _rppr_voronoi:

=======
voronoi
=======

`voronoi` finds a good collection of sequences to cut from ref tree.

::

  usage: voronoi [options] placefile

Options
=======

--unweighted  Treat every placement as a point mass concentrated on the highest-weight placement.
--pp  Use posterior probability for the weight.
-c  Reference package path.
-o  Specify the filename to write to.
--out-dir  Specify the directory to write files to.
--prefix  Specify a string to be prepended to filenames.
--no-csv  Output the results as a padded matrix instead of csv.
--node-numbers  Put the node numbers in where the bootstraps usually go.
-v  If specified, write progress output to stderr.
-t  If specified, the path to write the trimmed tree to.
--leaves  The maximum number of leaves to keep in the tree.
--leaf-mass  Fraction of mass to be distributed uniformly across leaves. Default 0.
--algorithm  Which algorithm to use to prune leaves. Choices are 'greedy', 'full', and 'force'. Default full.
--all-eclds-file  If specified, write out a csv file containing every intermediate computed ECLD.
--log  If specified with the full algorithm, write out a csv file containing solutions at every internal node.

Details
=======


``voronoi`` finds leaves of the reference tree that aren't "needed" for placement.
The definition requires some explaining, but we haven't even written the paper yet.
Check back soon.

Needless to say, this is an experimental feature.


.. _announcement: http://matsen.fhcrc.org/general/2011/09/27/convexify.html
.. _paper: http://arxiv.org/abs/1109.5423
